#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "pre-commit"

BRANCH_NAME=$(git branch --show-current)
echo "You are about to commit" $(git diff --cached --name-only --diff-filter=ACM)
echo "to $BRANCH_NAME"

# while : ; do
#     read -p "Do you want to switch branch? [y/n] " RESPONSE < /dev/tty
#     case "${RESPONSE}" in
#         [Yy]* )
#           read -p "Branch name?" BRANCH_NAME < /dev/tty
#           break;;
#         [Nn]* )
#           echo "Will be using $BRANCH_NAME"
#           break;;
#     esac
# done

# # Check if BRANCH_NAME is empty
# if [ -z "$BRANCH_NAME" ]; then
#   echo "Error: Branch name not specified."
#   exit 1
# fi

# # Check if branch exists in main repo
# if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
#   # If branch exists, switch to it if not already on it
#   if ! git rev-parse --abbrev-ref HEAD | grep -q "^$BRANCH_NAME$"; then
#     git checkout $BRANCH_NAME
#   fi
# else
#   # If branch does not exist, create and checkout it in main repo
#   git branch $BRANCH_NAME
#   git checkout $BRANCH_NAME
# fi

# SUBMODULES=$(git submodule status | awk '{ print $2 }')
# for SUBMODULE in $SUBMODULES; do
#   if (cd $SUBMODULE && git show-ref --verify --quiet refs/heads/$BRANCH_NAME); then
#     # If branch exists in submodule, switch to it if not already on it
#     if ! git -C $SUBMODULE rev-parse --abbrev-ref HEAD | grep -q "^$BRANCH_NAME$"; then
#       (cd $SUBMODULE && git checkout $BRANCH_NAME)
#     fi
#   else
#     # If branch does not exist in submodule, create and checkout it
#     (cd $SUBMODULE && git branch $BRANCH_NAME && git checkout $BRANCH_NAME)
#   fi
# done

# Exit with success status
exit 0

# files=$(git diff --cached --name-only --diff-filter=ACM | grep ".js\|.jsx\|.ts\|.tsx\|.css\|.scss\|.less\|.json\|.md$")

# if [ -z "$files" ]; then
#   echo "No matching files found for Prettier."
#   exit 0
# fi

# echo "$files" | xargs ./node_modules/.bin/prettier --write

# git add $files
# echo "Prettier completed."
